from backend.public_backend import *
from backend.logs_generator import log_message

header_line_1 = "Anthony's Home Appliance Repair Shop"
header_line_2 = "#305 Maharlika Highway, La Torre,"
header_line_3 = "Talavera, Nueva Ecija 3114"
header_line_4 = "Contact #: 09083287926 / 09368505809"
header_line_5 = 'PROOF OF PURCHASED'

dash_line_style = "border: none; border-bottom: 1px dashed black;"

footer = 'This receipt is generated by the tsystem.\n \
tsystem is an open-source software developed by Gerald Dave Trajano.\n \
For more information, please visit https://github.com/geraldtgit/aharts\n Email: geralddavetrajano@gmail.com'

process_dttm = datetime.datetime.now().strftime("%Y-%m-%d_%H.%M.%S")


def check_printer_connected():
    printer_list = win32print.EnumPrinters(win32print.PRINTER_ENUM_LOCAL, None, 1)
    print(printer_list)
    return bool(printer_list)


def check_receipt_db():
    # Check if the directory exists, and create it if necessary
    if not os.path.exists(receipt_db_dir):
        os.makedirs(receipt_db_dir)
        
# Actual receipt generator
def create_receipt(pdf_filename, customer_data, receipt_items_df, payment_amount):
    check_receipt_db()
    doc = SimpleDocTemplate(pdf_filename, pagesize=landscape(letter))
    story = []

    # Define center-aligned style
    center_style = ParagraphStyle(
        name='center', 
        alignment=1  # 0 for left, 1 for center, 2 for right
    )

    # Add a spacer to center the content vertically
    #story.append(Spacer(1, doc.height / 4))

    # Add centered header
    header0_paragraph = Paragraph(f"{header_line_1}<br></br>{header_line_2}<br></br>{header_line_3}<br></br>{header_line_4}<br></br>", style=center_style)
    story.append(header0_paragraph)

    # Add broken line
    story.append(HRFlowable(width="100%", thickness=0.5, spaceBefore=20, spaceAfter=20))

    # Add centered header
    header_paragraph = Paragraph(f"<b>{header_line_5}</b>", style=center_style)
    story.append(header_paragraph)

    # Add broken line
    story.append(HRFlowable(width="100%", thickness=0.5, spaceBefore=20, spaceAfter=20))

    # Add customer information
    for customer in customer_data:
        Service_Ticket = customer.get("Service-Ticket", "")
        customer_name = customer.get("name", "")
        customer_app = customer.get("appliance", "")
        customer_app_issue = customer.get("app_issue", "")
        process_dttm = customer.get("process_dttm", "")

        customer_info = f"<b>Service-Ticket:</b> {Service_Ticket}<br/>" \
                        f"<b>Name:</b> {customer_name}<br/>" \
                        f"<b>Appliance:</b> {customer_app}<br/>" \
                        f"<b>Issue:</b> {customer_app_issue}<br/>" \
                        f"<b>Printed Date:</b> {process_dttm}"

        customer_paragraph = Paragraph(customer_info, style=center_style)
        story.append(customer_paragraph)
        story.append(Spacer(1, 10))

    # Convert receipt_items_df to a list of dictionaries
    receipt_items = receipt_items_df.to_dict(orient='records')

    # Headers/Column names for the items
    item_headers = [
        "Quantity", "Item", "Price", "Subtotal"
    ]

    data = [item_headers]

    # Add items
    total_amount = 0
    for item in receipt_items:
        quantity = item.get("Quantity", 1)
        item_name = item.get("Item Name", "")
        item_price = f"Php{item.get('Price', 0):.2f}"
        subtotal = f"Php{quantity * item.get('Price', 0):.2f}"

        total_amount += quantity * item.get('Price', 0)

        data.append([quantity, item_name, item_price, subtotal])

    # Create a table
    table = Table(data, colWidths=[1 * inch, 2.5 * inch, 1.5 * inch, 1.5 * inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), '#CCCCCC'),
        ('TEXTCOLOR', (0, 0), (-1, 0), '#000000'),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), '#F7F7F7'),
        ('GRID', (0, 0), (-1, -1), 1, '#000000')
    ]))

    story.append(table)


    # Add total amount
    story.append(Spacer(1, 10))
    total_paragraph = Paragraph(f"<b>Total:</b> Php{total_amount:.2f}", style=center_style)
    story.append(total_paragraph)

    # Add payment and change information
    try:
        payment_amount = float(payment_amount)
    except:
        payment_amount = 0.00
    change = payment_amount - total_amount
    payment_change_info = f"<b>Payment:</b> Php{payment_amount:.2f}<br></br>" \
                          f"<b>Change:</b> Php{change:.2f}"
    payment_change_paragraph = Paragraph(payment_change_info, style=center_style)
    story.append(payment_change_paragraph)

    # Add broken line
    story.append(HRFlowable(width="100%", thickness=0.5, spaceBefore=20, spaceAfter=20))

    # Add footer
    footer_paragraph = Paragraph(f"{footer}<br></br><br></br><b>Thank you for your business!</b>", style=center_style)
    story.append(Spacer(1, 20))
    story.append(footer_paragraph)

    # Build the PDF
    doc.build(story)


def open_a_file(abs_filepath):
    msg = f"This file has been accessed: {abs_filepath}" 
    err_msg = f"Failed to open the PDF file. {abs_filepath}"
    system = platform.system()
    if system == 'Darwin':
        try:
            subprocess.run(['open', abs_filepath], check=True)  # On macOS
            log_message(msg)
        except subprocess.CalledProcessError:
            log_message(err_msg)
    elif system == 'Linux':
        try:
            subprocess.run(['xdg-open', abs_filepath], check=True)  # On Linux
            log_message(msg)
        except subprocess.CalledProcessError:
            log_message(err_msg)
    elif system == 'Windows':
        try:
            subprocess.run(['start', '', abs_filepath], check=True, shell=True)  # On Windows
            log_message(msg)
        except subprocess.CalledProcessError:
            log_message(err_msg)
    else:
        log_message(err_msg)